# ─────────────────────────────
# Oh My Zsh Configuration
# ─────────────────────────────
export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="agnoster"  # More informative theme
zstyle ':omz:update' mode auto

plugins=(
	git
	zsh-autosuggestions
	zsh-syntax-highlighting
	colored-man-pages
	command-not-found
	history-substring-search
	brew
	docker
	python
	pip
	ruby
	gem
	common-aliases
	extract
)

source $ZSH/oh-my-zsh.sh

# ─────────────────────────────
# PATH Setup (cleaned)
# ─────────────────────────────

# ─────────────────────────────
# Terminal Enhancements
# ─────────────────────────────
export CLICOLOR=1
export LSCOLORS=GxFxCxDxBxegedabagaced
export HISTSIZE=10000
export HISTFILESIZE=20000

setopt HIST_VERIFY
setopt HIST_REDUCE_BLANKS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_SAVE_NO_DUPS
setopt SHARE_HISTORY
setopt APPEND_HISTORY
setopt INC_APPEND_HISTORY

setopt CORRECT
setopt CORRECT_ALL
setopt AUTO_CD
setopt AUTO_PUSHD
setopt PUSHD_IGNORE_DUPS

# ─────────────────────────────
# Aliases
# ─────────────────────────────
alias config="codium ~/.zshrc"
alias reload="source ~/.zshrc && echo '✅ Configuration reloaded!'"
alias darwin-rebuild="sudo darwin-rebuild switch --flake ~/.config/nix-config#macbook"

# Updates & Maintenance
alias update-all="echo '🔄 Starting comprehensive system update...' && \
  echo '📦 Updating Oh My Zsh...' && omz update && \
  echo '🍺 Updating Homebrew packages...' && brew update && brew upgrade && \
  echo '🐍 Updating Python packages...' && pip3 list --outdated | tail -n +3 | cut -d ' ' -f 1 | xargs -n1 pip3 install -U && \
  echo '💎 Updating Ruby gems...' && gem update --user-install 2>/dev/null || true && \
  echo '🧹 Cleaning up...' && brew cleanup && brew autoremove && \
  echo '✅ All updates complete!'"
alias update="update-all"
alias cleanup="brew cleanup && brew autoremove && echo '🧹 Cleanup complete!'"
alias brewup="brew update && brew upgrade && brew cleanup"
alias pipup="pip3 list --outdated | tail -n +3 | cut -d ' ' -f 1 | xargs -n1 pip3 install -U"
alias gemup="gem update --user-install"

# Navigation & Files
alias ls='eza -la --icons'
alias ea="eza -A"
alias e="eza -CF"
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias ~="cd ~"

alias cls="clear"
alias h="history"
alias j="jobs -l"
alias path='echo -e ${PATH//:/\\n}'
alias now='date +"%T"'
alias nowdate='date +"%d-%m-%Y"'

# Git Shortcuts
alias gs="git status"
alias ga="git add"
alias gc="git commit"
alias gp="git push"
alias gl="git log --oneline"
alias gb="git branch"
alias gco="git checkout"

# Directory navigation colors
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

# Cybersecurity
alias msf='/opt/metasploit-framework/bin/msfconsole'
alias nmapfast="nmap -T4 -F --min-rate=1000"

# ─────────────────────────────
# Functions
# ─────────────────────────────
mkcd() { mkdir -p "$1" && cd "$1"; }

extract() {
	if [ -f "$1" ]; then
		case "$1" in
			*.tar.bz2)   tar xjf "$1"   ;;
			*.tar.gz)    tar xzf "$1"   ;;
			*.bz2)       bunzip2 "$1"   ;;
			*.rar)       unrar e "$1"   ;;
			*.gz)        gunzip "$1"    ;;
			*.tar)       tar xf "$1"    ;;
			*.tbz2)      tar xjf "$1"   ;;
			*.tgz)       tar xzf "$1"   ;;
			*.zip)       unzip "$1"     ;;
			*.Z)         uncompress "$1";;
			*.7z)        7z x "$1"      ;;
			*)           echo "'$1' cannot be extracted via extract()" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

findproc() { ps aux | grep -v grep | grep "$1"; }

# Python virtualenv helpers
alias mkvenv="python3 -m venv .venv && source .venv/bin/activate"
alias venv="source .venv/bin/activate"

# ─────────────────────────────
# Completions & Syntax Highlighting
# ─────────────────────────────
fpath=(/Users/elias/.docker/completions $fpath)
autoload -Uz compinit
compinit

# Syntax highlighting (MUST be last)
source /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
autoload -U compinit; compinit
export PATH="/opt/homebrew/bin:$PATH"
export PATH="/opt/homebrew/sbin:$PATH"

function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	IFS= read -r -d '' cwd < "$tmp"
	[ -n "$cwd" ] && [ "$cwd" != "$PWD" ] && builtin cd -- "$cwd"
	rm -f -- "$tmp"
}

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
